import type { ActionData, PolicyData, Session } from "@rhinestone/module-sdk";
import { type Abi, type AbiFunction, type Address, type Hex, type PublicClient } from "viem";
import type { AnyData } from "../utils/Types";
import type { ActionConfig, ActionPolicyInfo, CreateSessionDataParams, FullCreateSessionDataParams, RawActionConfig, ResolvedActionPolicyInfo, Rule } from "./Types";
export declare const MAX_RULES = 16;
/**
 * Generates a random salt as a hexadecimal string.
 *
 * @returns A 32-byte hexadecimal string prefixed with '0x'.
 */
export declare const generateSalt: () => Hex;
/**
 * Creates an ActionConfig object from rules and a value limit.
 *
 * @param rules - An array of Rule objects.
 * @param valueLimit - The maximum value allowed for the action.
 * @returns An ActionConfig object.
 */
export declare const createActionConfig: (rules: Rule[], valueLimit?: bigint) => ActionConfig;
/**
 * Applies default values to a CreateSessionDataParams object.
 *
 * @param sessionInfo - The CreateSessionDataParams object to apply defaults to.
 * @returns A FullCreateSessionDataParams object with default values applied.
 */
export declare const applyDefaults: (sessionInfo: CreateSessionDataParams) => FullCreateSessionDataParams;
/**
 * Creates an ActionData object.
 *
 * @param contractAddress - The address of the contract.
 * @param functionSelector - The function selector or AbiFunction.
 * @param policies - An array of PolicyData objects.
 * @returns An ActionData object.
 */
export declare const createActionData: (contractAddress: Address, functionSelector: string | AbiFunction, policies: PolicyData[]) => ActionData;
/**
 * Converts an ActionConfig to a RawActionConfig.
 *
 * @param config - The ActionConfig to convert.
 * @returns A RawActionConfig object.
 */
export declare const toActionConfig: (config: ActionConfig) => RawActionConfig;
/**
 * Gets the permission ID for a given session.
 *
 * @param client - The PublicClient to use for the contract call.
 * @param session - The Session object.
 * @returns A promise that resolves to the permission ID as a Hex string.
 */
export declare const getPermissionId: ({ client, session }: {
    client: PublicClient;
    session: Session;
}) => Promise<`0x${string}`>;
export declare const isPermissionEnabled: ({ client, accountAddress, permissionId }: {
    client: PublicClient;
    accountAddress: Address;
    permissionId: Hex;
}) => Promise<unknown>;
/**
 * Converts an ActionConfig to a UniversalActionPolicy.
 *
 * @param actionConfig - The ActionConfig to convert.
 * @returns A PolicyData object representing the UniversalActionPolicy.
 */
export declare const toUniversalActionPolicy: (actionConfig: ActionConfig) => PolicyData;
/**
 * Creates a TimeRangePolicy.
 *
 * @param validUntil - The timestamp until which the policy is valid.
 * @param validAfter - The timestamp after which the policy is valid.
 * @returns A PolicyData object representing the TimeRangePolicy.
 */
export declare const toTimeRangePolicy: (validUntil: number, validAfter: number) => PolicyData;
/**
 * Stringifies an object, explicitly tagging BigInt values.
 *
 * @param obj - The object to be stringified.
 * @returns A string representing the stringified object with tagged BigInts.
 */
export declare function stringify(obj: Record<string, AnyData>): string;
/**
 * Parses a string representation back into an object, correctly handling tagged BigInt values.
 *
 * @param data - The string representing the stringified object.
 * @returns The parsed object with BigInt values restored.
 */
export declare function parse(data: string): Record<string, AnyData>;
/**
 * Retrieves the list of trusted attesters for a given account from the registry.
 *
 * This function queries the registry contract to find all attesters that are trusted
 * by the specified account.
 *
 * @param params - The parameters object
 * @param params.account - The account to check trusted attesters for
 * @param params.client - The public client used to interact with the blockchain
 * @returns A promise that resolves to an array of addresses representing the trusted attesters
 * @throws Will log error and return empty array if registry query fails
 */
export declare const getTrustedAttesters: ({ accountAddress, client }: {
    accountAddress: Address;
    client: PublicClient;
}) => Promise<Address[]>;
/**
 * Converts an ABI to a list of ActionPolicyInfo objects.
 *
 * @param params - The parameters object
 * @param params.abi - The ABI to convert
 * @param params.actionPolicyInfo - The ActionPolicyInfo object to apply to each function in the ABI
 *
 * @example
 * const actionPoliciesInfo = abiToPoliciesInfo({
 *   abi: CounterAbi,
 *   actionPolicyInfo: {
 *     contractAddress: testAddresses.Counter,
 *     sudo: false,
 *     tokenLimits: [],
 *     usageLimit: 1000n,
 *     valueLimit: 1000n
 *   }
 * })
 * @returns An array of ActionPolicyInfo objects
 */
export type AbiToPoliciesInfoParams = Omit<ActionPolicyInfo, "functionSelector" | "rules"> & {
    abi: Abi;
};
export declare const abiToPoliciesInfo: ({ abi, ...actionPolicyInfo }: AbiToPoliciesInfoParams) => ResolvedActionPolicyInfo[];
//# sourceMappingURL=Helpers.d.ts.map