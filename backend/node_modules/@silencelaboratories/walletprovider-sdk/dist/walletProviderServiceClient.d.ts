import { AuthModule } from './authentication';
import { type KeygenSetupOpts, type KeygenResponse, type SignSetupOpts, type SignResponse, AddEphemeralKeyOpts, AddEphemeralKeyResponse } from './networkSigner';
import { type ClientConfig, IWalletProviderServiceClient } from './walletProviderServiceClientInterface';
/**
 * The Websocket client to the Wallet Provider backend service.
 * All requests are relayed by this entity to the MPC network.
 * @alpha
 */
export declare class WalletProviderServiceClient implements IWalletProviderServiceClient {
    walletProviderId: string;
    walletProviderUrl: string;
    passkeyCredentialId?: string;
    /**
     * Create new client that connects to the backend service
     * @param config - config containing information about backend service
     */
    constructor(config: ClientConfig);
    getWalletId(): string;
    startKeygen({ setup, authModule, }: {
        setup: KeygenSetupOpts;
        authModule: AuthModule;
    }): Promise<KeygenResponse>;
    startSigngen({ setup, authModule }: {
        setup: SignSetupOpts;
        authModule: AuthModule;
    }): Promise<SignResponse>;
    addEphemeralKey({ setup, authModule, }: {
        setup: AddEphemeralKeyOpts;
        authModule: AuthModule;
    }): Promise<AddEphemeralKeyResponse>;
    connect(setupOpts: KeygenSetupOpts | SignSetupOpts | AddEphemeralKeyOpts, authModule: AuthModule): Promise<string>;
}
