import { AddEphemeralKeyOpts, KeygenSetupOpts, SignSetupOpts } from './networkSigner';
import { IBrowserWallet } from './EOAauthentication';
import { PasskeyUser, RelyingPartyConfig } from './passkeyAuthentication';
import { EphClaim } from './ephemeralAuthentication';
/** Type of the request authentication
 * @alpha
 */
export type UserCredentials = {
    id: string;
    method: 'eoa' | 'ephemeral' | 'passkey';
    credentials: string;
};
export type UserAuthentication = {
    credentials: UserCredentials;
    signature: string;
};
export interface AuthModule {
    authenticate({ setup, challenge, }: {
        setup: KeygenSetupOpts | SignSetupOpts | AddEphemeralKeyOpts;
        challenge: string;
    }): Promise<UserAuthentication>;
}
export interface DkgAuthModule extends AuthModule {
    get ephClaim(): EphClaim;
}
/** The `EOAAuth` implementing Externally Owned Account authentication.
 * @alpha
 */
export declare class EOAAuth implements DkgAuthModule {
    /** An interface to the wallet, like MetaMask, that is used to sign the requests */
    private browserWallet;
    /** the ETH address that is used to do EOA authentication */
    private eoa;
    /** Ephemeral key claim */
    ephClaim: EphClaim;
    /**
     *
     * @param ephId - Ephemeral key ID
     * @param eoa - Ethereum address
     * @param browserWallet - Interface to the wallet provider, like MetaMask, that is used to sign the requests
     * @param ephPK - Ephemeral public key
     * @param lifetime - Lifetime of the ephemeral key. Default is 1 hour
     */
    constructor(ephId: string, eoa: string, browserWallet: IBrowserWallet, ephPK: Uint8Array, lifetime: number);
    private validateInputs;
    /**
     * Prepares a message to present on the Browser Wallet window and requests to sign it.
     * @param setup - Keygen setup options
     * @param challenge - the challenge received from the backend
     *
     * @public
     */
    authenticate({ setup, challenge }: {
        setup: KeygenSetupOpts;
        challenge: string;
    }): Promise<UserAuthentication>;
}
/** The `EphAuth` module is only used for signing requests to the network.
 * @alpha
 * An Ephmeral key used to locally sign the signature requests to network.
 * This eph key is registered during keygen. The key is used to sign the requests without
 * asking the user to sign the request each time.
 * */
export declare class EphAuth implements AuthModule {
    /** Secret key of the ephemeral keypair */
    private ephSK;
    /** Ephemeral key claim */
    private ephClaim;
    /**
     *
     * @param ephId - Ephemeral key ID
     * @param ephSK - Ephemeral secret key
     */
    constructor(ephId: string, ephSK: Uint8Array);
    /**
     * Prepares a message to present on the Browser Wallet window and requests to sign it.
     * @param setup - Signgen setup options
     * @param challenge - the challenge received from the backend
     *
     * @public
     */
    authenticate({ setup, challenge }: {
        setup: SignSetupOpts;
        challenge: string;
    }): Promise<UserAuthentication>;
}
/** The `AuthModule` implementing Passkey authentication.
 * @alpha
 */
export declare class PasskeyAuth implements DkgAuthModule {
    /** Replying party object. Read more: https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredentialCreationOptions#rp */
    private rpConfig;
    /** ID of the acceptable credential by user. App proves that user has passkey credential by passing the value of this field */
    private allowCredentialId;
    /** Passkey user information, only requires while registering. Read more: https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredentialCreationOptions#user */
    private user;
    /** Ephemeral key claim */
    ephClaim: EphClaim;
    /**
     *
     * @param rpConfig - Passkey relying party configuration. Read more: https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredentialCreationOptions#rp
     * @param user - Passkey user information, only requires while registering. Read more: https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredentialCreationOptions#user
     * @param allowCredentialId - ID of the acceptable credential by user. App proves that user has passkey credential by passing the value of this field
     * @param ephId - Ephemeral key ID
     * @param ephPK - Ephemeral public key
     * @param lifetime - Lifetime of the ephemeral key. Default is 1 hour
     */
    constructor(rpConfig: RelyingPartyConfig, user: PasskeyUser | null, allowCredentialId: string | null, ephId: string, ephPK: Uint8Array, lifetime: number);
    authenticate({ setup, challenge, }: {
        setup: KeygenSetupOpts | AddEphemeralKeyOpts;
        challenge: string;
    }): Promise<UserAuthentication>;
}
